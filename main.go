package main

import (
	"context"
	"crypto/md5"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"os"
	"os/signal"
	"path/filepath"
	"runtime"
	"strings"
	"sync"
	"syscall"
	"time"

	"github.com/deanishe/awgo"
)

const star rune = 'â­‘'

var client = &http.Client{
	Timeout: time.Second * 5,
}

func debug(format string, a ...interface{}) {
	if os.Getenv("DEBUG") != "" {
		fmt.Fprintf(os.Stderr, format+"\n", a...)
	}
}

func md5hash(s string) string {
	h := md5.New()
	io.WriteString(h, s)
	sum := h.Sum(nil)
	return hex.EncodeToString(sum)
}

// false -> MISS
// true  -> HIT
func openOrCreateFile(filename string) (*os.File, bool, error) {
	f, err := os.Open(filename)
	if os.IsNotExist(err) {
		f, err := os.Create(filename)
		return f, false, err
	}
	return f, true, err
}

func placeBrokenImage() string {
	filename := "/tmp/net.nkcmr.alfred-apple-app-search-broken-image.png"
	f, ok, err := openOrCreateFile(filename)
	if err != nil {
		return ""
	}
	defer f.Close()
	if !ok {
		f.Write(brokenImageImage)
	}
	return filename
}

func downloadAllImages(ctx context.Context, concurrency int, urls []string) []*aw.Icon {
	die := func(format string, a ...interface{}) {
		fmt.Fprintf(os.Stderr, "error: "+format+"\n", a...)
		// yes, deferred function calls will run even if Goexit() is called
		// (https://play.golang.org/p/LZ5Mt6F1DQW) DONT CALL IN MAIN GO ROUTINE
		runtime.Goexit()
	}
	output := make([]*aw.Icon, len(urls))
	var wg sync.WaitGroup
	sem := make(chan bool, concurrency)
	brokenimage := placeBrokenImage()
	dl := func(i int, url string) {
		output[i] = &aw.Icon{
			Type:  aw.IconTypeImage,
			Value: brokenimage,
		}
		filename := fmt.Sprintf(
			"%s/net.nkcmr.alfred-apple-app-search/%s.png",
			strings.TrimRight(os.TempDir(), "/"),
			md5hash(url),
		)
		if err := os.MkdirAll(filepath.Dir(filename), os.ModePerm); err != nil {
			die(err.Error())
			return
		}
		f, hit, err := openOrCreateFile(filename)
		if err != nil {
			die(
				"failed to create or open file for downloaded artwork: %s",
				err.Error(),
			)
			return
		}
		defer f.Close()
		if !hit {
			debug("downloading: %s to %s", url, filename)
			resp, err := client.Get(url)
			if err != nil {
				die("failed to request artwork: %s", err.Error())
				return
			}
			defer resp.Body.Close()
			if _, err := io.Copy(f, resp.Body); err != nil {
				die("failed to download artwork: %s", err.Error())
				return
			}
		} else {
			debug("file is cached (%s)", filename)
		}
		output[i].Value = filename
	}
	for i, u := range urls {
		wg.Add(1)
		go func(i int, u string) {
			defer func() {
				<-sem
				wg.Done()
			}()
			sem <- true
			dl(i, u)
		}(i, u)
	}
	wg.Wait()
	return output
}

func sigContext() context.Context {
	ctx, cancel := context.WithCancel(context.Background())
	go func() {
		defer cancel()
		c := make(chan os.Signal)
		signal.Notify(c, syscall.SIGTERM, syscall.SIGINT)
		fmt.Printf("signal: %s\n", <-c)
	}()
	return ctx
}

func main() {
	defer func() {
		if r := recover(); r != nil {
			log.Printf("fatal error: %+v", r)
			os.Exit(1)
		}
	}()
	ctx := sigContext()
	url, err := url.ParseRequestURI(
		"https://itunes.apple.com/search?media=software&entity=macSoftware",
	)
	if err != nil {
		panic(err)
	}
	q := url.Query()
	q.Set("term", os.Args[1])
	q.Set("limit", "20")
	url.RawQuery = q.Encode()
	req, err := http.NewRequest("GET", url.String(), http.NoBody)
	if err != nil {
		panic(err)
	}
	debug("sending request: %s %s", req.Method, req.URL.String())
	resp, err := client.Do(req.WithContext(ctx))
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		panic(fmt.Errorf("non-ok status code returned (%d)", resp.StatusCode))
	}
	var results struct {
		Results []struct {
			ID         int64   `json:"trackId"`
			Name       string  `json:"trackName"`
			Artwork    string  `json:"artworkUrl512"`
			URL        string  `json:"trackViewUrl"`
			Rating     float64 `json:"averageUserRating"`
			PriceFmt   string  `json:"formattedPrice"`
			NumRatings int     `json:"userRatingCount"`
		} `json:"results"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&results); err != nil {
		panic(err)
	}
	debug("successfully downloaded results (%d results)", len(results.Results))
	images := make([]string, len(results.Results))
	fb := aw.NewFeedback()
	for i, res := range results.Results {
		item := new(aw.Item).
			Title(res.Name).
			Subtitle(
				fmt.Sprintf(
					"%s | %s (%d ratings)",
					res.PriceFmt,
					strings.Repeat(string(star), int(res.Rating)),
					res.NumRatings,
				),
			).
			Arg(fmt.Sprintf("macappstores://itunes.apple.com/app/id%d", res.ID)).
			Valid(true).
			IsFile(false)
		item.NewModifier(aw.ModAlt).Arg(res.URL).Valid(true).Subtitle("Open in browser")
		fb.Items = append(fb.Items, item)
		images[i] = res.Artwork
	}
	icons := downloadAllImages(ctx, runtime.NumCPU(), images)
	for i := range icons {
		fb.Items[i] = fb.Items[i].Icon(icons[i])
	}
	json.NewEncoder(os.Stdout).Encode(fb)
}

// raw data from https://github.com/chromium/chromium/blob/952de60c9b492e04e7bb4ded108bff186010be0a/third_party/blink/public/default_200_percent/blink/broken_image.png
var brokenImageImage = []byte{
	0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,
	0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x20,
	0x08, 0x06, 0x00, 0x00, 0x00, 0x01, 0xb5, 0x18,
	0x42, 0x00, 0x00, 0x02, 0xf1, 0x49, 0x44, 0x41,
	0x54, 0x78, 0x5e, 0xbd, 0x96, 0xcb, 0x6b, 0x13,
	0x51, 0x14, 0x87, 0x7f, 0x77, 0x32, 0x49, 0xda,
	0x5a, 0x6b, 0x2d, 0xe2, 0x0b, 0xc1, 0xae, 0xc4,
	0xee, 0x14, 0xbb, 0x10, 0x71, 0x27, 0xa2, 0x2b,
	0x17, 0x05, 0x05, 0x75, 0xd5, 0xd4, 0x8a, 0x7f,
	0x45, 0xbb, 0x71, 0xe1, 0xc2, 0x85, 0xa8, 0x20,
	0xb6, 0x4d, 0x8b, 0x4a, 0x95, 0xaa, 0x18, 0x70,
	0x61, 0x29, 0x8a, 0xa5, 0x2a, 0x16, 0x69, 0xa5,
	0x0f, 0x51, 0x14, 0x7c, 0x94, 0x16, 0x1f, 0x6d,
	0x4d, 0xd2, 0xa6, 0xc9, 0x34, 0x99, 0x4c, 0xe6,
	0x98, 0x1c, 0x99, 0x0e, 0xc3, 0x9d, 0xa1, 0xb6,
	0x49, 0xfc, 0xe0, 0x70, 0xb9, 0x93, 0x21, 0xdf,
	0xfc, 0xce, 0x9c, 0x4b, 0x22, 0xba, 0xba, 0xc2,
	0x84, 0x12, 0x92, 0xcd, 0x66, 0x1b, 0x9b, 0xce,
	0x9e, 0x7f, 0x0b, 0x0f, 0x58, 0x78, 0xe2, 0x64,
	0x33, 0x4c, 0x2a, 0xce, 0xab, 0x08, 0x81, 0x81,
	0xc7, 0xbd, 0x48, 0x26, 0x93, 0x00, 0x84, 0xa7,
	0x54, 0x25, 0x22, 0xa4, 0x32, 0x84, 0x4c, 0xb6,
	0x38, 0x61, 0xd0, 0x0f, 0xa6, 0xa5, 0xe5, 0x1c,
	0xc2, 0xe1, 0xae, 0xd1, 0x47, 0xbd, 0x1d, 0x8d,
	0x4d, 0x67, 0x5a, 0x25, 0xa9, 0xca, 0x6d, 0xc8,
	0x11, 0x96, 0x75, 0xb3, 0xb8, 0x84, 0x8a, 0xc2,
	0xab, 0x43, 0x7a, 0xb7, 0x53, 0x92, 0x2a, 0x44,
	0x04, 0xe2, 0x0d, 0x15, 0x55, 0x04, 0xc6, 0xda,
	0xe7, 0xa5, 0x2d, 0x00, 0xa8, 0x20, 0x3d, 0x20,
	0x25, 0xb4, 0x74, 0x25, 0x86, 0xa5, 0xe1, 0x70,
	0xd8, 0x91, 0x94, 0x13, 0xb2, 0x8d, 0x48, 0xaa,
	0xcd, 0x55, 0x02, 0x0d, 0x3b, 0xfd, 0xd8, 0xb7,
	0x3b, 0x50, 0x58, 0x79, 0x0f, 0x22, 0x8f, 0x02,
	0x43, 0x44, 0x8e, 0x0a, 0x85, 0x42, 0x2b, 0x49,
	0x89, 0xc0, 0x43, 0x63, 0xf9, 0x1c, 0xd4, 0x6e,
	0x50, 0x50, 0xbf, 0xd5, 0x0f, 0x8b, 0x8a, 0x80,
	0xe0, 0x3d, 0xcd, 0x66, 0x11, 0x4f, 0xc9, 0xef,
	0x9b, 0xac, 0x95, 0x20, 0xd1, 0xdc, 0x1c, 0x42,
	0x4f, 0x4f, 0xf7, 0x68, 0xe4, 0x5e, 0x67, 0xa3,
	0x0a, 0x8f, 0x1b, 0x77, 0x6c, 0x56, 0xe1, 0xc6,
	0xf6, 0xfc, 0xf5, 0x58, 0x52, 0x87, 0x0b, 0x7c,
	0x24, 0xf2, 0x5f, 0x0c, 0x2f, 0x84, 0x10, 0xa3,
	0x9c, 0xb0, 0x80, 0xb5, 0x6e, 0xaa, 0xe2, 0x64,
	0xf0, 0xab, 0x02, 0x6e, 0x54, 0x06, 0x04, 0x6a,
	0x2a, 0x05, 0x16, 0x35, 0x67, 0xca, 0x4c, 0xc6,
	0xc0, 0xe1, 0x63, 0xa7, 0xf3, 0x9f, 0x2b, 0x70,
	0xc3, 0xaf, 0xfa, 0xf0, 0x24, 0x72, 0x07, 0xb6,
	0x10, 0xbc, 0xca, 0x32, 0x19, 0xbe, 0x67, 0x7c,
	0x2a, 0x0d, 0x0b, 0xeb, 0x68, 0xa9, 0xbe, 0x20,
	0x96, 0x73, 0x1e, 0xe9, 0xfc, 0x01, 0x0e, 0xc5,
	0x42, 0x10, 0x58, 0xd7, 0xb0, 0x2b, 0xc8, 0xb2,
	0x55, 0x11, 0xf2, 0x54, 0xe7, 0x28, 0x5f, 0x06,
	0xc1, 0x0b, 0xbf, 0x4a, 0xb6, 0x90, 0x31, 0xd9,
	0xba, 0x2a, 0xba, 0x41, 0x98, 0x9a, 0xd5, 0xf9,
	0xfe, 0xb5, 0xc2, 0x42, 0x80, 0x3d, 0xec, 0x7b,
	0x3f, 0x9d, 0x46, 0xb9, 0x20, 0x30, 0xd2, 0x3b,
	0x2c, 0x27, 0x76, 0x4b, 0xd9, 0x49, 0xe5, 0x96,
	0xd9, 0x42, 0xcb, 0xfe, 0x3f, 0x12, 0x8a, 0x15,
	0xa1, 0x59, 0x7e, 0x9f, 0xf8, 0x9f, 0x2d, 0x15,
	0x52, 0x4b, 0xcd, 0x7f, 0x32, 0x12, 0xe2, 0xfa,
	0x0c, 0x34, 0x23, 0x86, 0xa0, 0xaf, 0x1a, 0x75,
	0x81, 0x7a, 0x28, 0x42, 0x5d, 0x55, 0xe6, 0x7a,
	0x2c, 0x40, 0x26, 0xbc, 0xc8, 0x98, 0x29, 0x4c,
	0xc6, 0x23, 0xf8, 0x90, 0xe8, 0x67, 0x99, 0x45,
	0x50, 0xa9, 0xc6, 0xde, 0x9a, 0xa3, 0xd8, 0x5f,
	0x77, 0x0a, 0x95, 0xbe, 0x5a, 0x57, 0x99, 0xe7,
	0xb1, 0x30, 0x3d, 0x7c, 0xd3, 0xda, 0x08, 0x86,
	0xe6, 0xae, 0x40, 0xcb, 0xc5, 0x5c, 0x1e, 0x24,
	0x89, 0x89, 0x85, 0x08, 0x3e, 0x26, 0x9e, 0xe2,
	0xd0, 0x96, 0x0b, 0xd8, 0xb3, 0xf1, 0x88, 0x53,
	0x26, 0x0f, 0x8d, 0xfd, 0x7b, 0xe8, 0xc6, 0x58,
	0xbc, 0x0f, 0xfd, 0x3f, 0xdb, 0x25, 0x99, 0x9b,
	0x78, 0x70, 0xee, 0x32, 0x86, 0xa3, 0x1d, 0x00,
	0xc8, 0x55, 0x06, 0x62, 0x21, 0x71, 0x42, 0xe2,
	0x84, 0x4e, 0xeb, 0x9b, 0x58, 0x37, 0x26, 0x17,
	0x1f, 0x62, 0x2d, 0x4c, 0xe6, 0xd3, 0x12, 0x41,
	0x1c, 0xac, 0x6b, 0x75, 0xf5, 0xd9, 0x09, 0x19,
	0x5a, 0xa9, 0xf1, 0x85, 0xfb, 0x2c, 0x5b, 0x07,
	0xe2, 0xdd, 0x62, 0x04, 0x9f, 0x96, 0x06, 0x58,
	0x61, 0x17, 0x4b, 0xc0, 0x42, 0x38, 0xc1, 0xb7,
	0xd4, 0x2b, 0x8c, 0xc4, 0x6f, 0xad, 0x4b, 0x66,
	0x6d, 0x5e, 0x47, 0x6f, 0x62, 0xc9, 0xf8, 0xe5,
	0x9c, 0x17, 0xb7, 0xa1, 0x49, 0x18, 0x3f, 0xf0,
	0xe2, 0xf7, 0x55, 0x00, 0xb4, 0x5e, 0x19, 0x63,
	0x50, 0x1a, 0x2f, 0xe7, 0xaf, 0xe3, 0xf8, 0xb6,
	0x8b, 0x0e, 0x99, 0xa3, 0xa5, 0x39, 0x33, 0x8b,
	0xe7, 0xf3, 0x97, 0xa0, 0x9b, 0xa9, 0x22, 0x64,
	0x36, 0xdf, 0xd3, 0x63, 0xf4, 0x39, 0x39, 0x58,
	0x90, 0x70, 0x49, 0x2d, 0x9d, 0x48, 0x3c, 0x40,
	0x54, 0xff, 0x52, 0xac, 0xcc, 0xd1, 0xc6, 0x91,
	0x85, 0x1e, 0x9e, 0x60, 0x02, 0x39, 0xff, 0x08,
	0x47, 0xd3, 0x33, 0x79, 0x61, 0x5f, 0x29, 0x65,
	0x8c, 0x96, 0x8b, 0x62, 0x38, 0x7e, 0xc3, 0xba,
	0x68, 0x27, 0x7c, 0x36, 0x73, 0x0d, 0x26, 0x19,
	0x25, 0x94, 0xd9, 0x7c, 0x4d, 0x0d, 0x61, 0x5c,
	0xbb, 0x0d, 0x3d, 0xa7, 0xf1, 0x5e, 0xb4, 0xb5,
	0xb5, 0x93, 0xa6, 0x69, 0x25, 0x96, 0xc9, 0x90,
	0x20, 0x54, 0x54, 0x05, 0xf0, 0x07, 0x9f, 0xba,
	0x0c, 0x56, 0x38, 0x85, 0x33, 0xe1, 0x00, 0x00,
	0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42,
}
